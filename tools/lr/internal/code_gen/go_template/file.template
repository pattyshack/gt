package go_template

import (
    "fmt"
    "io"
    "unicode/utf8"

    "github.com/pattyshack/gt/codegen"
    lr "github.com/pattyshack/gt/tools/lr/internal"
    parser "github.com/pattyshack/gt/tools/lr/internal/parser"
   "github.com/pattyshack/gt/tools/lr/internal/code_gen/debug_template"
)

template File {
    Package                 string

    Imports                 io.WriterTo

    ActionType              string
    ActionIdType            string

    ShiftAction             string
    ReduceAction            string
    AcceptAction            string
    ShiftAndReduceAction    string

    StateIdType             string
    ReduceType              string

    SymbolType              string
    GenericSymbol           interface{}

    StackItemType           string
    StackType               string

    SymbolStackType         string

    SymbolIdType            string
    EndSymbolId             string
    WildcardSymbolId        string

    Location                interface{}
    StartEndPos             interface{}
    TokenType               interface{}

    LexerType               interface{}
    ReducerType             string

    ErrHandlerType          string
    DefaultErrHandlerType   string

    ExpectedTerminalsFunc   string

    ParseFuncPrefix         string
    InternalParseFunc       string

    TableKeyType            string
    ActionTableType         string
    ActionTable             string

    Sprintf                 interface{}
    Errorf                  interface{}
    NewLocationError        interface{}
    EOF                     interface{}

    OrderedSymbolNames      []string  // ^, *, $, terminals, non-terminals

    Grammar                 *lr.Grammar
    States                  *lr.LRStates

    OrderedValueTypes       lr.ParamList

    OutputDebugNonKernelItems bool
}

%%
// Auto-generated from source: $(Grammar.Source)

package $Package

[[-embed Imports -]]

type $SymbolIdType int

const (
[[-$
charIds := map[int]struct{}{}
charTermToIds := map[string]int{}
for _, term := range Grammar.Terminals {
  if term.SymbolId == parser.LRCharacterToken {
    rune, _ := utf8.DecodeRuneInString(term.Name[1:len(term.Name)-1])
    charIds[int(rune)] = struct{}{}
    charTermToIds[term.Name] = int(rune)
  }
}

_nextId := 256
nextId := func() int {
  for {
    id := _nextId
    _, ok := charIds[id]

    _nextId += 1

    if !ok {
      return id
    }
  }
}

-]]
[[-for _, term := range Grammar.Terminals-]]
    [[-if term.SymbolId != parser.LRIdentifierToken]]
    // char token $(term.Name) = $(SymbolIdType)($(charTermToIds[term.Name]))
    [[-end-]]
[[-end]]
[[-for _, term := range Grammar.Terminals-]]
    [[-if term.SymbolId == parser.LRIdentifierToken]]
    $(term.CodeGenSymbolConst) = $(SymbolIdType)($(nextId()))
    [[-end-]]
[[-end]]
)

[[-for _, rule := range Grammar.NonTerminals-]]
    [[-if rule.NumReducerClauses == 0-]]
        [[-continue-]]
    [[-end]]
type $(rule.CodeGenReducerInterface) interface {
    [[-for clauseIdx, clause := range rule.Clauses-]]
        [[-if clause.Passthrough-]]
          [[-continue-]]
        [[-end-]]
        [[-if clauseIdx > 0]]

        [[-end-]]

        [[-if clause.Label == ""]]
    // $(clause.Location.ShortString()): $(rule.Name) -> ...
        [[-else]]
    // $(clause.Location.ShortString()): $(rule.Name) -> $(clause.Label): ...
        [[-end-]]

        [[-$ paramNameCount := map[string]int{}]]
    $(clause.CodeGenReducerName)(
        [[-for termIdx, term := range clause.Bindings-]]

            [[-$

            paramName := ""
            if term.SymbolId == parser.LRCharacterToken {
                paramName = "char"
            } else {
                // hack: append "_" to the end of the name ensures the
                // name is never a go keyword
                paramName = codegen.SnakeToCamel(term.Name) + "_"
            }

            paramNameCount[paramName] += 1
            cnt := paramNameCount[paramName]
            if cnt > 1 {
                paramName = fmt.Sprintf("%s%d", paramName, cnt)
            }

            suffix := ""
            if termIdx != len(clause.Bindings) {
                suffix = ", "
            }

            -]]
$paramName $(term.CodeGenType)$suffix
        [[-end-]]
) ($(rule.CodeGenType), error)
    [[-end-]]
}
[[end]]

type $ReducerType interface {
[[-for _, rule := range Grammar.NonTerminals-]]
    [[-if len(rule.Clauses) == 0-]]
        [[-continue-]]
    [[-end]]
  [[-if rule.NumReducerClauses > 0]]
  $(rule.CodeGenReducerInterface)
  [[-end]]
[[-end]]
}

type $ErrHandlerType interface {
    Error(nextToken $TokenType, parseStack $StackType) error
}

type $DefaultErrHandlerType struct {}

func ($DefaultErrHandlerType) Error(nextToken $TokenType, stack $StackType) error {
    return $NewLocationError(
        nextToken.Loc(),
        "syntax error: unexpected symbol %s. expecting %v",
        nextToken.Id(),
        $ExpectedTerminalsFunc(stack[len(stack)-1].StateId))
}

func $ExpectedTerminalsFunc(id $StateIdType) []$SymbolIdType {
  switch id {
[[-for _, state := range States.OrderedStates-]]
  [[-$
  _, ok := state.Reduce[lr.Wildcard]
  if ok {
    continue
  }
  ]]
  case $(state.CodeGenConst):
    return []$SymbolIdType{
    [[-for _, term := range Grammar.Terminals-]]
      [[-$

      _, foundGoto := state.Goto[term.Name]
      _, foundReduce := state.Reduce[term.Name]
      _, foundShiftAndReduce := state.ShiftAndReduce[term.Name]

      if !foundGoto && !foundReduce && !foundShiftAndReduce {
        continue
      }
      -]]
      $(term.CodeGenSymbolConst),
    [[-end-]]
    [[-if _, ok := state.Reduce[lr.EndMarker]; ok-]]
      $EndSymbolId,
    [[-end-]]
    }
[[-end]]
  }

  return nil
}

[[-for idx, start := range Grammar.Starts-]]
    [[-$

    parseSuffix := ""
    if len(Grammar.Starts) > 1 {
        parseSuffix = codegen.SnakeToCamel(start.Name)
    }

    ]]
func $(ParseFuncPrefix)$(parseSuffix)(lexer $LexerType, reducer $ReducerType) (
[[-#-]]
$(start.CodeGenType), error) {

    return $(ParseFuncPrefix)$(parseSuffix)WithCustomErrorHandler(
        lexer,
        reducer,
        $DefaultErrHandlerType{})
}

func $(ParseFuncPrefix)$(parseSuffix)WithCustomErrorHandler(
    lexer $LexerType,
    reducer $ReducerType,
    errHandler $ErrHandlerType,
) (
    $(start.CodeGenType),
    error,
) {
    item, err := $InternalParseFunc(lexer, reducer, errHandler, $(
        States.OrderedStates[idx].CodeGenConst))
    if err != nil {
        var errRetVal $(start.CodeGenType)
        return errRetVal, err
    }
    return item.$(start.ValueType), nil
}
[[end]]

// ================================================================
// Parser internal implementation
// User should normally avoid directly accessing the following code
// ================================================================

func $InternalParseFunc(
    lexer $LexerType,
    reducer $ReducerType,
    errHandler $ErrHandlerType,
    startState $StateIdType,
) (
    *$StackItemType,
    error,
) {
    stateStack := $StackType{
        // Note: we don't have to populate the start symbol since its value
        // is never accessed.
        &$StackItemType{startState, nil},
    }

    symbolStack := &$SymbolStackType{lexer: lexer}

    for {
        nextSymbol, err := symbolStack.Top()
        if err != nil {
            return nil, err
        }

        action, ok := $ActionTable.Get(
            stateStack[len(stateStack)-1].StateId,
            nextSymbol.Id())
        if !ok {
            return nil, errHandler.Error(nextSymbol, stateStack)
        }

        if action.ActionType == $ShiftAction {
            stateStack = append(stateStack, action.ShiftItem(nextSymbol))

            _, err = symbolStack.Pop()
            if err != nil {
                return nil, err
            }
        } else if action.ActionType == $ReduceAction {
            var reduceSymbol *$SymbolType
            stateStack, reduceSymbol, err = action.ReduceSymbol(
                reducer,
                stateStack)
            if err != nil {
                return nil, err
            }

            symbolStack.Push(reduceSymbol)
        } else if action.ActionType == $ShiftAndReduceAction {
            stateStack = append(stateStack, action.ShiftItem(nextSymbol))

            _, err = symbolStack.Pop()
            if err != nil {
                return nil, err
            }

            var reduceSymbol *$SymbolType
            stateStack, reduceSymbol, err = action.ReduceSymbol(
                reducer,
                stateStack)
            if err != nil {
                return nil, err
            }

            symbolStack.Push(reduceSymbol)
        } else if action.ActionType == $AcceptAction {
            if len(stateStack) != 2 {
                panic("This should never happen")
            }
            return stateStack[1], nil
        } else {
            panic("Unknown action type: " + action.ActionType.String())
        }
    }
}

func (i $SymbolIdType) String() string {
    switch i {
    case $EndSymbolId:
        return "$$"
    case $WildcardSymbolId:
        return "*"
[[-for _, symbolName := range OrderedSymbolNames[3:]]]
    [[-$ term := Grammar.Terms[symbolName]]]
    case $(term.CodeGenSymbolConst):
    [[-if term.SymbolId == parser.LRCharacterToken -]]
        [[-$

        escaped := term.Name
        if term.Name == "'\"'" {
            escaped = "'\\\"'"
        } else if escaped[1] == '\\' {
            escaped = "'\\\\" + term.Name[2:]
        }

        ]]
        return "$escaped"
    [[-else]]
        return "$(term.Name)"
    [[-end-]]
[[-end]]
    default:
        return $Sprintf("?unknown symbol %d?", int(i))
    }
}

const (
    $EndSymbolId = $SymbolIdType(0)
    $WildcardSymbolId = $SymbolIdType(-1)

[[-for idx, term := range Grammar.NonTerminals]]
    $(term.CodeGenSymbolConst) = $SymbolIdType($(256+len(Grammar.Terminals)+idx))
[[-end]]
)

type $ActionIdType int

const (
    // NOTE: error action is implicit
    $ShiftAction = $ActionIdType(0)
    $ReduceAction = $ActionIdType(1)
    $ShiftAndReduceAction = $ActionIdType(2)
    $AcceptAction = $ActionIdType(3)
)

func (i $ActionIdType) String() string {
    switch i {
    case $ShiftAction:
        return "shift"
    case $ReduceAction:
        return "reduce"
    case $ShiftAndReduceAction:
        return "shift-and-reduce"
    case $AcceptAction:
        return "accept"
    default:
        return $Sprintf("?Unknown action %d?", int(i))
    }
}

type $ReduceType int

const (
[[-$ clauseIdx := 1 -]]
[[-for _, rule := range Grammar.NonTerminals-]]
    [[-for _, clause := range rule.Clauses]]
    $(clause.CodeGenReducerNameConst) = $ReduceType($clauseIdx)
        [[-$ clauseIdx += 1 -]]
    [[-end-]]
[[-end]]
)

func (i $ReduceType) String() string {
    switch i {
[[-for _, rule := range Grammar.NonTerminals-]]
    [[-for _, clause := range rule.Clauses]]
    case $(clause.CodeGenReducerNameConst):
        return "$(clause.CodeGenReducerName)"
    [[-end-]]
[[-end]]
    default:
        return $Sprintf("?unknown reduce type %d?", int(i))
    }
}

type $StateIdType int

func (id $StateIdType) String() string {
    return $Sprintf("State %d", int(id))
}

const (
[[-for _, state := range States.OrderedStates]]
    $(state.CodeGenConst) = $StateIdType($(state.StateNum))
[[-end]]
)

type $SymbolType struct {
    SymbolId_ $SymbolIdType

    Generic_ $GenericSymbol

[[-for _, valueType := range OrderedValueTypes-]]
    [[-if valueType.Name == lr.Generic-]]
        [[-continue-]]
    [[-end]]
    $(valueType.Name) $(valueType.ParamType)
[[-end]]
}

[[-$

valueTerms := map[string][]*lr.Term{}
for _, symbolName := range OrderedSymbolNames[2:] {
    term := Grammar.Terms[symbolName]
    valueTerms[term.ValueType] = append(valueTerms[term.ValueType], term)
}

-]]
func NewSymbol(token $TokenType) (*$SymbolType, error) {
    symbol, ok := token.(*$SymbolType)
    if ok {
        return symbol, nil
    }

    symbol = &$SymbolType{SymbolId_: token.Id()}
    switch token.Id() {
[[-for _, valueType := range OrderedValueTypes-]]
    [[-$

    consts := []string{}
    for _, term := range valueTerms[valueType.Name] {
        if !term.IsTerminal {
            break
        }

        consts = append(consts, term.CodeGenSymbolConst)
    }

    if len(consts) == 0 {
        continue
    }

    ]]
    case 
    [[-for idx, kconst := range consts-]]
$kconst [[-if idx != len(consts)-1 ]], [[end-]]
    [[-end-]]
:
        val, ok := token.($(valueType.ParamType))
        if !ok {
            return nil, $NewLocationError(
                token.Loc(),
                "invalid value type for token %s. "+
                    "expecting $(valueType.ParamType)",
                token.Id())
        }
        symbol.$(valueType.Name) = val
[[-end]]
    default:
        return nil, $NewLocationError(
          token.Loc(),
          "unexpected token type: %s",
          token.Id())
    }
    return symbol, nil
}

func (s *$SymbolType) Id() $SymbolIdType {
    return s.SymbolId_
}

func (s *$SymbolType) StartEnd() $StartEndPos {
    type locator interface { StartEnd() $StartEndPos }
    switch s.SymbolId_ {
[[-for _, field := range OrderedValueTypes-]]
    [[-if field.Name == lr.Generic-]]
        [[-continue-]]
    [[-end-]]
    [[-$ terms := valueTerms[field.Name]]]
    [[-if len(terms) == 0]]
      [[-continue]]
    [[-end]]
    case 
    [[-for idx, term := range terms -]]
$(term.CodeGenSymbolConst)
        [[-if idx != len(terms)-1 -]], [[end-]]
    [[-end-]]
:
        loc, ok := interface{}(s.$(field.Name)).(locator)
        if ok {
            return loc.StartEnd()
        }
[[-end]]
    }
    return s.Generic_.StartEnd()
}

func (s *$SymbolType) Loc() $Location {
    type locator interface { Loc() $Location }
    switch s.SymbolId_ {
[[-for _, field := range OrderedValueTypes-]]
    [[-if field.Name == lr.Generic-]]
        [[-continue-]]
    [[-end-]]
    [[-$ terms := valueTerms[field.Name]]]
    [[-if len(terms) == 0]]
      [[-continue]]
    [[-end]]
    case 
    [[-for idx, term := range terms -]]
$(term.CodeGenSymbolConst)
        [[-if idx != len(terms)-1 -]], [[end-]]
    [[-end-]]
:
        loc, ok := interface{}(s.$(field.Name)).(locator)
        if ok {
            return loc.Loc()
        }
[[-end]]
    }
    return s.Generic_.Loc()
}

func (s *$SymbolType) End() $Location {
    type locator interface { End() $Location }
    switch s.SymbolId_ {
[[-for _, field := range OrderedValueTypes-]]
    [[-if field.Name == lr.Generic-]]
        [[-continue-]]
    [[-end-]]
    [[-$ terms := valueTerms[field.Name]]]
    [[-if len(terms) == 0]]
      [[-continue]]
    [[-end]]
    case 
    [[-for idx, term := range terms -]]
$(term.CodeGenSymbolConst)
        [[-if idx != len(terms)-1 -]], [[end-]]
    [[-end-]]
:
        loc, ok := interface{}(s.$(field.Name)).(locator)
        if ok {
            return loc.End()
        }
[[-end]]
    }
    return s.Generic_.End()
}

type $SymbolStackType struct {
    lexer $LexerType
    top []*$SymbolType
}

func (stack *$SymbolStackType) Top() (*$SymbolType, error) {
    if len(stack.top) == 0 {
        token, err := stack.lexer.Next()
        if err != nil {
            if err != $EOF {
                return nil, $NewLocationError(
                  stack.lexer.CurrentLocation(),
                  "unexpected lex error: %w",
                  err)
            }
            token = $GenericSymbol{
              SymbolId: $EndSymbolId,
              StartEndPos: $StartEndPos{
                StartPos: stack.lexer.CurrentLocation(),
                EndPos: stack.lexer.CurrentLocation(),
              },
            }
        }
        item, err := NewSymbol(token)
        if err != nil {
            return nil, err
        }
        stack.top = append(stack.top, item)
    }
    return stack.top[len(stack.top)-1], nil
}

func (stack *$SymbolStackType) Push(symbol *$SymbolType) {
    stack.top = append(stack.top, symbol)
}

func (stack *$SymbolStackType) Pop() (*$SymbolType, error) {
    if len(stack.top) == 0 {
        return nil, $Errorf("internal error: cannot pop an empty top")
    }
    ret := stack.top[len(stack.top)-1]
    stack.top = stack.top[:len(stack.top)-1]
    return ret, nil
}

type $StackItemType struct {
    StateId $StateIdType

    *$SymbolType
}

type $StackType []*$StackItemType

type $ActionType struct {
    ActionType $ActionIdType

    ShiftStateId $StateIdType
    ReduceType $ReduceType
}

func (act *$ActionType) ShiftItem(symbol *$SymbolType) *$StackItemType {
    return &$StackItemType{StateId: act.ShiftStateId, $SymbolType: symbol}
}

func (act *$ActionType) ReduceSymbol(
    reducer $ReducerType,
    stack $StackType,
) (
    $StackType,
    *$SymbolType,
    error,
) {
    var err error
    symbol := &$SymbolType{}
    switch act.ReduceType {
[[-for _, rule := range Grammar.NonTerminals-]]
    [[-for _, clause := range rule.Clauses]]
    case $(clause.CodeGenReducerNameConst):
        [[-if len(clause.Bindings) > 0]]
        args := stack[len(stack)-$(len(clause.Bindings)):]
        stack = stack[:len(stack)-$(len(clause.Bindings))]
        [[-end]]
        symbol.SymbolId_ = $(rule.CodeGenSymbolConst)
        [[-if clause.Passthrough]]
        //line $(clause.Location)
        symbol.$(rule.ValueType) = args[0].$(clause.Bindings[0].ValueType)
        err = nil
        [[-else]]
        symbol.$(rule.ValueType), err = reducer.$(clause.CodeGenReducerName)(
          [[-for idx, term := range clause.Bindings-]]
  args[$idx].$(term.ValueType)
              [[-if idx != len(clause.Bindings)-1]], [[-end-]]
          [[-end-]]
)
        [[-end]]
    [[-end-]]
[[-end]]
    default:
        panic("Unknown reduce type: " + act.ReduceType.String())
    }

    if err != nil {
        err = $Errorf("unexpected %s reduce error: %w", act.ReduceType, err)
    }

    return stack, symbol, err
}

type $TableKeyType struct {
    $StateIdType
    $SymbolIdType
}

type $ActionTableType struct{}

func ($ActionTableType) Get(
  stateId $StateIdType,
  symbolId $SymbolIdType,
) (
  $ActionType,
  bool,
) {
  switch stateId {
[[-for _, state := range States.OrderedStates]]
  case $(state.CodeGenConst):
    switch symbolId {
  [[-for _, symbolName := range OrderedSymbolNames-]]
    [[-if symbolName == lr.Wildcard-]]
      [[-continue-]]
    [[-end-]]

    [[-$
    symbol := Grammar.Terms[symbolName]
    nextState, ok := state.Goto[symbolName]
    -]]
    [[-if ok]]
    case $(symbol.CodeGenSymbolConst):
      return $ActionType{$ShiftAction, $(nextState.CodeGenConst), 0}, true
      [[-continue-]]
    [[-end-]]
  [[-end-]]

  [[-for _, symbolName := range OrderedSymbolNames-]]
    [[-if symbolName == lr.Wildcard-]]
      [[-continue-]]
    [[-end-]]

    [[-$
    symbol := Grammar.Terms[symbolName]
    reduceItem, ok := state.ShiftAndReduce[symbolName]
    -]]
    [[-if ok]]
    case $(symbol.CodeGenSymbolConst):
      return $ActionType{$ShiftAndReduceAction, 0, $(reduceItem.Clause.CodeGenReducerNameConst)}, true
      [[-continue-]]
    [[-end-]]
  [[-end-]]

  [[-for _, symbolName := range OrderedSymbolNames-]]
    [[-if symbolName == lr.Wildcard-]]
      [[-continue-]]
    [[-end-]]

    [[-$
    symbol := Grammar.Terms[symbolName]
    reduceItems, ok := state.Reduce[symbolName]
    -]]
    [[-if ok]]
    case $(symbol.CodeGenSymbolConst):
      [[-for _, item := range reduceItems-]]
        [[-if item.Name == lr.AcceptRule && item.LookAhead == lr.EndMarker]]
      return $ActionType{$AcceptAction, 0, 0}, true
        [[-else]]
      return $ActionType{$ReduceAction, 0, $(item.Clause.CodeGenReducerNameConst)}, true
        [[-end-]]
      [[-end-]]
      [[-continue-]]
    [[-end-]]
  [[-end]]

    [[-$
    reduceItems, ok := state.Reduce[lr.Wildcard]
    -]]
    [[-if ok]]
    default:
      [[-for _, item := range reduceItems-]]
      return $ActionType{$ReduceAction, 0, $(item.Clause.CodeGenReducerNameConst)}, true
      [[-end-]]
    [[-end-]]
    }
[[-end]]
  }

  return $ActionType{}, false
}

var $ActionTable = $ActionTableType{}

/*
[[embed
&debug_template.File{
    OrderedSymbolNames: OrderedSymbolNames,
    States: States,
    OutputDebugNonKernelItems: OutputDebugNonKernelItems,
}
-]]
*/
